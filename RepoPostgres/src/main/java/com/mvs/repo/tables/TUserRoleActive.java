/*
 * This file is generated by jOOQ.
 */
package com.mvs.repo.tables;


import com.mvs.repo.Indexes;
import com.mvs.repo.Keys;
import com.mvs.repo.Public;
import com.mvs.repo.tables.records.TUserRoleActiveRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TUserRoleActive extends TableImpl<TUserRoleActiveRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.t_user_role_active</code>
     */
    public static final TUserRoleActive T_USER_ROLE_ACTIVE = new TUserRoleActive();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TUserRoleActiveRecord> getRecordType() {
        return TUserRoleActiveRecord.class;
    }

    /**
     * The column <code>public.t_user_role_active.id</code>.
     */
    public final TableField<TUserRoleActiveRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.t_user_role_active.created_at</code>.
     */
    public final TableField<TUserRoleActiveRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.t_user_role_active.updated_at</code>.
     */
    public final TableField<TUserRoleActiveRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.t_user_role_active.deleted</code>.
     */
    public final TableField<TUserRoleActiveRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.t_user_role_active.user_id</code>.
     */
    public final TableField<TUserRoleActiveRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.t_user_role_active.role_id</code>.
     */
    public final TableField<TUserRoleActiveRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private TUserRoleActive(Name alias, Table<TUserRoleActiveRecord> aliased) {
        this(alias, aliased, null);
    }

    private TUserRoleActive(Name alias, Table<TUserRoleActiveRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.t_user_role_active</code> table reference
     */
    public TUserRoleActive(String alias) {
        this(DSL.name(alias), T_USER_ROLE_ACTIVE);
    }

    /**
     * Create an aliased <code>public.t_user_role_active</code> table reference
     */
    public TUserRoleActive(Name alias) {
        this(alias, T_USER_ROLE_ACTIVE);
    }

    /**
     * Create a <code>public.t_user_role_active</code> table reference
     */
    public TUserRoleActive() {
        this(DSL.name("t_user_role_active"), null);
    }

    public <O extends Record> TUserRoleActive(Table<O> child, ForeignKey<O, TUserRoleActiveRecord> key) {
        super(child, key, T_USER_ROLE_ACTIVE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_USER_ROLE_ACTIVE, Indexes.T_USER_ROLE_ACTIVE_DELETED_USER_ID_IDX, Indexes.T_USER_ROLE_ACTIVE_ROLE_ID_IDX, Indexes.T_USER_ROLE_ACTIVE_USER_ID_ROLE_ID_IDX);
    }

    @Override
    public Identity<TUserRoleActiveRecord, Long> getIdentity() {
        return (Identity<TUserRoleActiveRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TUserRoleActiveRecord> getPrimaryKey() {
        return Keys.T_USER_ROLE_ACTIVE_PKEY;
    }

    @Override
    public List<ForeignKey<TUserRoleActiveRecord, ?>> getReferences() {
        return Arrays.asList(Keys.T_USER_ROLE_ACTIVE__T_USER_ROLE_ROLE_ID_FKEY);
    }

    private transient TRole _tRole;

    public TRole tRole() {
        if (_tRole == null)
            _tRole = new TRole(this, Keys.T_USER_ROLE_ACTIVE__T_USER_ROLE_ROLE_ID_FKEY);

        return _tRole;
    }

    @Override
    public TUserRoleActive as(String alias) {
        return new TUserRoleActive(DSL.name(alias), this);
    }

    @Override
    public TUserRoleActive as(Name alias) {
        return new TUserRoleActive(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TUserRoleActive rename(String name) {
        return new TUserRoleActive(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TUserRoleActive rename(Name name) {
        return new TUserRoleActive(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, LocalDateTime, LocalDateTime, Boolean, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
