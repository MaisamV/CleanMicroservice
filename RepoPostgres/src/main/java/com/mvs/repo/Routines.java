/*
 * This file is generated by jOOQ.
 */
package com.mvs.repo;


import com.mvs.repo.routines.CheckFunction;
import com.mvs.repo.routines.DailyPartitioner;
import com.mvs.repo.routines.MinPartitioner;
import com.mvs.repo.routines.MonthlyPartitioner;
import com.mvs.repo.routines.YearlyPartitioner;

import java.time.LocalDateTime;

import org.jooq.Configuration;
import org.jooq.Field;


/**
 * Convenience access to all stored procedures and functions in public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

    /**
     * Call <code>public.check_function</code>
     */
    public static Integer checkFunction(
          Configuration configuration
    ) {
        CheckFunction f = new CheckFunction();

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.check_function</code> as a field.
     */
    public static Field<Integer> checkFunction() {
        CheckFunction f = new CheckFunction();

        return f.asField();
    }

    /**
     * Call <code>public.daily_partitioner</code>
     */
    public static void dailyPartitioner(
          Configuration configuration
        , String t
        , String field
        , LocalDateTime d1
        , LocalDateTime d2
    ) {
        DailyPartitioner p = new DailyPartitioner();
        p.setT(t);
        p.setField(field);
        p.setD1(d1);
        p.setD2(d2);

        p.execute(configuration);
    }

    /**
     * Call <code>public.min_partitioner</code>
     */
    public static void minPartitioner(
          Configuration configuration
        , String t
        , String field
        , LocalDateTime d1
        , LocalDateTime d2
    ) {
        MinPartitioner p = new MinPartitioner();
        p.setT(t);
        p.setField(field);
        p.setD1(d1);
        p.setD2(d2);

        p.execute(configuration);
    }

    /**
     * Call <code>public.monthly_partitioner</code>
     */
    public static void monthlyPartitioner(
          Configuration configuration
        , String t
        , String field
        , LocalDateTime d1
        , LocalDateTime d2
    ) {
        MonthlyPartitioner p = new MonthlyPartitioner();
        p.setT(t);
        p.setField(field);
        p.setD1(d1);
        p.setD2(d2);

        p.execute(configuration);
    }

    /**
     * Call <code>public.yearly_partitioner</code>
     */
    public static void yearlyPartitioner(
          Configuration configuration
        , String t
        , String field
        , LocalDateTime d1
        , LocalDateTime d2
    ) {
        YearlyPartitioner p = new YearlyPartitioner();
        p.setT(t);
        p.setField(field);
        p.setD1(d1);
        p.setD2(d2);

        p.execute(configuration);
    }
}
