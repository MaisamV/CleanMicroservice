buildscript {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
    }

    dependencies {
        classpath "org.jooq:jooq-codegen:$jooq_version"
    }
}
plugins {
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1"
    id 'org.jetbrains.kotlin.jvm'
    id 'java'
    id "org.flywaydb.flyway" version "$flyway_version"
    id 'nu.studer.jooq' version '6.0.1'
}

apply from: 'flyway.gradle'

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
    google()
}

dependencies {
    api project(':IRepo')
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    implementation "org.flywaydb:flyway-core:$flyway_version"
    implementation "org.postgresql:postgresql:$jdbc_version"

    jooqGenerator "org.postgresql:postgresql:$jdbc_version"
    implementation "org.jooq:jooq:$jooq_version"
    implementation "org.jooq:jooq-meta:$jooq_version"
    implementation "org.jooq:jooq-codegen:$jooq_version"

    implementation 'org.apache.commons:commons-dbcp2:2.9.0'
}

test {
    useJUnitPlatform()
}

jooq {
    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = System.getenv("db_url")
                    user = System.getenv("db_superuser_name")
                    password = System.getenv("db_superuser_pass")
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.repo'
                        directory = 'build/generated/sources/jooq/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}